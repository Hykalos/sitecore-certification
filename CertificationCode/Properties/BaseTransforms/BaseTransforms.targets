<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- TransformWebConfigBase Configuration  -->
  <PropertyGroup>
    <TransformWebConfigBaseTransformations>Base</TransformWebConfigBaseTransformations>
  </PropertyGroup>

  <!--<PropertyGroup>
    <PublishingTargetsProject>$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v$(VisualStudioVersion)\Web\Microsoft.Web.Publishing.targets</PublishingTargetsProject>
  </PropertyGroup>
  <Import Project="$(PublishingTargetsProject)" Condition="Exists($(PublishingTargetsProject))"/>-->

  <!--********************************************************************-->
  <!--Target CollectWebConfigsToTransform -->
  <!-- Add any .config file to transform pipeline -->
  <!--********************************************************************-->
  
  <PropertyGroup>
    <CollectWebConfigsToTransformDependsOn>
      $(CollectWebConfigsToTransformDependsOn);
      CollectConfigsToTransform;
    </CollectWebConfigsToTransformDependsOn>
  </PropertyGroup>

  <Target Name="CollectConfigsToTransform" Condition="'$(CollectWebConfigsToTransform)' != 'false'">
    <!-- Gather Sources, Transforms, and Destinations for the TransformXml task. Exclude web.config (already included) -->
    <ItemGroup>
      <WebConfigsToTransform
        Include="@(FilesForPackagingFromProject)"
        Condition="'%(Extension)' == '.config' And '%(Filename)%(Extension)' != '$(ProjectConfigFileName)'">
        <TransformFile>$([System.String]::new($(WebPublishPipelineProjectDirectory)\$([System.IO.Path]::GetDirectoryName($([System.String]::new(%(DestinationRelativePath)))))).TrimEnd('\'))\%(Filename).$(Configuration)%(Extension)</TransformFile>
        <TransformOriginalFolder>$(TransformWebConfigIntermediateLocation)\original</TransformOriginalFolder>
        <TransformFileFolder>$(TransformWebConfigIntermediateLocation)\assist</TransformFileFolder>
        <TransformOutputFile>$(TransformWebConfigIntermediateLocation)\transformed\%(DestinationRelativePath)</TransformOutputFile>
        <TransformScope>$([System.IO.Path]::GetFullPath($(WPPAllFilesInSingleFolder)\%(DestinationRelativePath)))</TransformScope>
      </WebConfigsToTransform>
      <_WebConfigsToTransformOuputs Include="@(WebConfigsToTransform->'%(TransformOutputFile)')" />
    </ItemGroup>
  </Target>

  <!--********************************************************************-->
  <!--Target CollectFilesForProfileTransformWebConfigs -->
  <!-- Add any .config file to transform pipeline -->
  <!--********************************************************************-->

  <PropertyGroup>
    <CollectFilesForProfileTransformWebConfigsDependsOn>
      $(CollectFilesForProfileTransformWebConfigsDependsOn);
      CollectFilesForProfileTransformConfigs;
    </CollectFilesForProfileTransformWebConfigsDependsOn>
  </PropertyGroup>

  <Target Name="CollectFilesForProfileTransformConfigs" Condition="'$(CollectFilesForProfileTransformWebConfigs)' != 'false' And '$(PublishProfileName)' != ''">
    <!-- Gather Sources, Transforms, and Destinations for the TransformXml task -->
    <ItemGroup Condition="'$(ProjectProfileTransformFileName)'!=''">
      <ProfileWebConfigsToTransform Include="@(FilesForPackagingFromProject)"
                             Condition="'%(Extension)' == '.config' And '%(Filename)%(Extension)' != '$(ProjectConfigFileName)'">
        <TransformFile>$([System.String]::new($(WebPublishPipelineProjectDirectory)\$([System.IO.Path]::GetDirectoryName($([System.String]::new(%(DestinationRelativePath)))))).TrimEnd('\'))\%(Filename).$(PublishProfileName)%(Extension)</TransformFile>
        <TransformOriginalFolder>$(ProfileTransformWebConfigIntermediateLocation)\original</TransformOriginalFolder>
        <TransformFileFolder>$(ProfileTransformWebConfigIntermediateLocation)\assist</TransformFileFolder>
        <TransformOutputFile>$(ProfileTransformWebConfigIntermediateLocation)\transformed\%(DestinationRelativePath)</TransformOutputFile>
        <TransformScope>$([System.IO.Path]::GetFullPath($(WPPAllFilesInSingleFolder)\%(DestinationRelativePath)))</TransformScope>
      </ProfileWebConfigsToTransform>
      <_ProfileWebConfigsToTransformOuputs Include="@(ProfileWebConfigsToTransform->'%(TransformOutputFile)')" />
    </ItemGroup>
  </Target>
  

  <!-- Force TransformWebConfigBase between PreTransformWebConfig and TransformWebConfigCore/ParameterizeTransformWebConfigCore-->
  <PropertyGroup>
    <TransformWebConfigCoreDependsOn>$(TransformWebConfigCoreDependsOn);TransformWebConfigBase;</TransformWebConfigCoreDependsOn>
    <ParameterizeTransformWebConfigCoreDependsOn>$(ParameterizeTransformWebConfigCoreDependsOn);TransformWebConfigBase;</ParameterizeTransformWebConfigCoreDependsOn>
    <TransformWebConfigBaseDependsOn>PreTransformWebConfig;</TransformWebConfigBaseDependsOn>
  </PropertyGroup>

  <!-- Execute only if Build Configuration transform and Publish Profile transform is not Base transform -->
  <Target Name="TransformWebConfigBase" DependsOnTargets="$(TransformWebConfigBaseDependsOn)" Condition="$(Configuration) != $(TransformWebConfigBaseTransformations) And $(PublishProfileName) != $(TransformWebConfigBaseTransformations)">
    <!-- Inputs="@(WebConfigsToTransform);%(TransformFile)" Outputs="@(WebConfigsToTransform)" -->

    <ItemGroup>
      <!-- Add required base metadata to itemgroup -->
      <WebConfigsToTransform Condition="'%(WebConfigsToTransform.Identity)' == '%(Identity)'">
        <BaseTransformFile>%(WebConfigsToTransform.RelativeDir)%(WebConfigsToTransform.Filename).$(TransformWebConfigBaseTransformations)%(WebConfigsToTransform.Extension)</BaseTransformFile>
        <BaseTransformOutputFile>$(TransformWebConfigIntermediateLocation)\base\%(DestinationRelativePath)</BaseTransformOutputFile>
        <BaseTransformOutputFileFolder>$(TransformWebConfigIntermediateLocation)\base\%(RelativeDir)</BaseTransformOutputFileFolder>
      </WebConfigsToTransform>
    </ItemGroup>

    <ItemGroup>
      <!-- Gather all the web.config files which do not have a base transform file and exclude them for further transformation -->
      <_TempNoBaseTransformWebConfigToTransform Include="@(WebConfigsToTransform)" Condition="%(BaseTransformFile) == '' Or !Exists(%(BaseTransformFile))" />
      <WebConfigsToTransform Remove="@(_TempNoBaseTransformWebConfigToTransform)" />
    </ItemGroup>

    <!-- Ensure that all output folders exist. Create if not -->
    <PropertyGroup>
      <_BaseWebConfigsToTransformOuputsDirectories>@(WebConfigsToTransform->'%(BaseTransformOutputFileFolder)')</_BaseWebConfigsToTransformOuputsDirectories>
    </PropertyGroup>

    <ItemGroup>
      <_BaseWebConfigsToTransformOuputsDirectories Include="$(_BaseWebConfigsToTransformOuputsDirectories)" />
    </ItemGroup>
    <MakeDir Directories="@(_BaseWebConfigsToTransformOuputsDirectories)" Condition="!Exists(%(Identity))" />

    <!-- Transform web.config files using Base transform -->
    <TransformXml
      Source="@(WebConfigsToTransform)"
      Transform="%(BaseTransformFile)"
      Destination="%(BaseTransformOutputFile)"
      Condition="Exists(%(BaseTransformFile)) And !%(Exclude)"
      StackTrace="$(TransformWebConfigStackTraceEnabled)"
      SourceRootPath="$(WebPublishPipelineSourceRootDirectory)"
      TransformRootPath="$(WebPublishPipelineTransformRootDirectory)" />

    <GetPublishingLocalizedString
      Importance="High"
      Condition="'@(WebConfigsToTransform)'!='' And !%(WebConfigsToTransform.Exclude) And Exists(%(WebConfigsToTransform.BaseTransformOutputFile))"
      ID="PublishLocalizedString_TransformConfigUsingTransformFileToTransformOutputFile"
      ArgumentCount="3"
      Arguments="@(WebConfigsToTransform->'%(Identity)');%(BaseTransformFile); %(BaseTransformOutputFile)"
      LogType="Message" />
    <!-- "Transformed @(WebConfigsToTransform) using %(BaseTransformFile) into %(BaseTransformOutputFile)" />-->

    <!-- Gather all Base transformed web.configs -->
    <ItemGroup>
      <_BaseWebConfigsToTransform Include="@(WebConfigsToTransform->'%(BaseTransformOutputFile)')" Condition="'%(WebConfigsToTransform.RelativeDir)' == '%(RelativeDir)'">
        <TransformFile>%(WebConfigsToTransform.TransformFile)</TransformFile>
        <TransformOriginalFolder>%(WebConfigsToTransform.TransformOriginalFolder)</TransformOriginalFolder>
        <TransformFileFolder>%(WebConfigsToTransform.TransformFileFolder)</TransformFileFolder>
        <TransformOutputFile>%(WebConfigsToTransform.TransformOutputFile)</TransformOutputFile>
        <TransformScope>%(WebConfigsToTransform.TransformScope)</TransformScope>
      </_BaseWebConfigsToTransform>
    </ItemGroup>
    <ItemGroup>

      <!-- Remove original configs from package-->
      <FilesForPackagingFromProject Remove="@(WebConfigsToTransform)" />

      <!-- Empty original ItemGroup -->
      <WebConfigsToTransform Remove="@(WebConfigsToTransform)" />
      <!-- Add web.configs with no Base transform -->
      <WebConfigsToTransform Include="@(_TempNoBaseTransformWebConfigToTransform)" />
      <!-- Add Base transformed web.configs -->
      <WebConfigsToTransform Include="@(_BaseWebConfigsToTransform)" />

      <!--Add transformed configs to package-->
      <FilesForPackagingFromProject Include="@(WebConfigsToTransform)" />

    </ItemGroup>
  </Target>
</Project>